# -*- coding: utf-8 -*-
"""Tutorial de Python para calcular los puntos de pivote.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YxldONv6BP3946Pde_BCy5sI0VDIcw71

# Tutorial de Python para calcular los puntos de pivote

Los puntos de pivote (Pivot Points) son niveles significativos en el gráfico de cotizaciones que actúan como un indicador de soporte y resistencia. Estos niveles se calculan a partir de los máximos, mínimos y cierres del período anterior y se utilizan para estimar los futuros niveles de soporte y resistencia. Los puntos de pivote nos proporcionan los niveles psicológicos del mercado, que son niveles de soporte y resistencia utilizados por muchos traders.

Los puntos de pivote son importantes en el trading porque ayudan a identificar niveles críticos donde se enfrentan los traders alcistas (bulls) y los bajistas (bears). Según el mercado se va acercando a dichos niveles, se pueden dar dos opciones: que el precio rebote o la posibilidad de una ruptura. Identificar dónde están estos niveles de soportes y resistencias es una habilidad realmente útil que podrías perfeccionar para anticipar el movimiento del precio, y para ello nos van a ayudar los Pivot Points.
"""

# Importamos las librerías necesarias.
!pip install mplfinance
import yfinance as yf
import matplotlib.pyplot as plt
import mplfinance as mpf
import pandas as pd
from datetime import datetime

# Se define el símbolo del ticker (en este caso, BTC-USD).
t = "AAPL"
ticker = yf.Ticker(t)

# Se obtiene el historial de precios
start_datetime = datetime.strptime("2023-08-31 00:00:00", "%Y-%m-%d %H:%M:%S")
end_datetime = datetime.strptime("2023-09-01 12:21:00", "%Y-%m-%d %H:%M:%S")
data = ticker.history(start=start_datetime, end=end_datetime, interval="5m")

# Podemos hacer un análisis exploratorio de los datos para ver con qué estamos trabajando.
data

# Función para calcular los puntos pivote y niveles de soporte/resistencia
def calculate_pivot_points(data):
    close = data["Close"].iloc[-1]
    high = data["High"].iloc[-1]
    low = data["Low"].iloc[-1]

    pivot = (high + low + close) / 3
    support1 = 2 * pivot - high
    resistance1 = 2 * pivot - low
    support2 = pivot - (resistance1 - support1)
    resistance2 = pivot + (resistance1 - support1)

    return pivot, support1, resistance1, support2, resistance2

# Se calculan los puntos pivote y niveles de soporte/resistencia
pivot, support1, resistance1, support2, resistance2 = calculate_pivot_points(data)

# Se elige un estilo para el gráfico de velas (candlestick)
style = mpf.available_styles()[6]

# Se crea el gráfico de velas con mplfinance
fig, axlist = mpf.plot(
    data,
    type="candle",
    volume=True,
    style=style,
    title=f"{t} Candlestick Chart with Pivot Points",
    ylabel="Price",
    ylabel_lower="Volume",
    returnfig=True,
)

ax = axlist[0]

# Se agregan líneas horizontales para representar los puntos pivote y niveles de soporte/resistencia en el gráfico
ax.axhline(pivot, color="#6929c4", linestyle="-", label="Pivot")
ax.axhline(support1, color="#1192e8", linestyle="--", label="Support 1")
ax.axhline(resistance1, color="#005d5d", linestyle="--", label="Resistance 1")
ax.axhline(support2, color="#9f1853", linestyle="-.", label="Support 2")
ax.axhline(resistance2, color="#570408", linestyle="-.", label="Resistance 2")

ax.legend(loc="upper left")

# Se muestra el gráfico
plt.show()

"""En resumen, este código realiza lo siguiente:

* Importa las librerías necesarias.
* Obtiene datos históricos de precios de Bitcoin.
* Calcula puntos pivote y niveles de soporte/resistencia basados en esos datos.
* Crea un gráfico de velas (candlestick chart) con los datos y agrega líneas horizontales para representar los puntos pivote y niveles de soporte/resistencia.
"""